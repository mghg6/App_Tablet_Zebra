import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:intl/intl.dart';

import 'package:zebra_scanner_app/widgets/material_separation.dart';

class QualityReviewModal extends StatefulWidget {
  final List<String> scannedEpcs;
  final int noLogistica;
  final String clienteName;

  const QualityReviewModal({
    Key? key,
    required this.scannedEpcs,
    required this.noLogistica,
    required this.clienteName,
  }) : super(key: key);

  @override
  _QualityReviewModalState createState() => _QualityReviewModalState();
}

class _QualityReviewModalState extends State<QualityReviewModal> {
  bool isLoading = false;
  final TextEditingController operadorController = TextEditingController();

  @override
  void dispose() {
    operadorController.dispose();
    super.dispose();
  }

  // Agregar esta función en el QualityReviewModal
  void _mostrarDialogoExito(BuildContext context) {
    showDialog(
      context: context,
      barrierDismissible: false, // El usuario debe interactuar con el diálogo
      builder: (BuildContext context) {
        return AlertDialog(
          title: Row(
            children: [
              Icon(Icons.check_circle, color: Colors.green, size: 30),
              SizedBox(width: 10),
              Text('¡Operación Exitosa!'),
            ],
          ),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                'La información se ha enviado correctamente.',
                style: TextStyle(fontSize: 16),
              ),
              SizedBox(height: 10),
              Text(
                'Detalles:',
                style: TextStyle(fontWeight: FontWeight.bold),
              ),
              Text('• Excel generado'),
              Text('• Datos almacenados en el sistema'),
              Text('• No. Logística: ${widget.noLogistica}'),
            ],
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(15),
          ),
          actions: [
            TextButton(
              child: Text(
                'Aceptar',
                style: TextStyle(fontSize: 16),
              ),
              onPressed: () {
                Navigator.of(context).pop(); // Cerrar el diálogo
                Navigator.of(context)
                    .pop(true); // Cerrar el modal y retornar true
              },
            ),
          ],
        );
      },
    );
  }

// Modificar el método _sendQualityReview para usar el nuevo diálogo
  Future<void> _sendQualityReview() async {
    setState(() => isLoading = true);

    try {
      final formattedEpcs = widget.scannedEpcs
          .map((epc) => epc.length < 16 ? epc.padLeft(16, '0') : epc)
          .toList();

      // Create the new request body according to the specified structure
      final requestBody = {
        'id_Revision': 0, // This will be auto-generated by the server
        'no_Logistica': widget.noLogistica,
        'cliente': widget.clienteName,
        'operador_Separador': operadorController.text.isEmpty
            ? 'Embarques'
            : operadorController.text,
        'lista_Trazabilidades':
            json.encode(formattedEpcs), // Converting array to JSON string
        'estatus': 'Material Separado',
        'noEPCs': formattedEpcs.length,
        'lastUpdate': DateTime.now().toUtc().toIso8601String()
      };

      final response = await http
          .post(
            Uri.parse('http://172.16.10.31/api/logistics_to_review'),
            headers: {'Content-Type': 'application/json'},
            body: json.encode(requestBody),
          )
          .timeout(const Duration(seconds: 30));

      if (response.statusCode == 200 || response.statusCode == 201) {
        // Limpiar todos los datos almacenados
        MaterialSeparationWidgetState.resetAllData();

        // Mostrar diálogo de éxito
        _mostrarDialogoExito(context);

        // Mostrar SnackBar de confirmación
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(
            content: Text('Revisión registrada correctamente'),
            backgroundColor: Colors.green,
          ),
        );
      } else {
        throw Exception(
            'Error del servidor: ${response.statusCode}\n${response.body}');
      }
    } catch (e) {
      print('Error details: $e');
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Error: $e'),
          backgroundColor: Colors.red,
        ),
      );
    } finally {
      setState(() => isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    return Dialog(
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
      child: SingleChildScrollView(
        child: Container(
          padding: const EdgeInsets.all(16),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    'Revisión de Calidad ${widget.noLogistica}',
                    style: const TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  IconButton(
                    icon: const Icon(Icons.close),
                    onPressed: () => Navigator.pop(context),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              TextField(
                controller: operadorController,
                decoration: const InputDecoration(
                  labelText: 'Nombre del Operador',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.person),
                ),
              ),
              const SizedBox(height: 16),
              const Text(
                'EPCs Escaneados:',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
              Container(
                height: 200,
                margin: const EdgeInsets.symmetric(vertical: 8),
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: ListView.builder(
                  itemCount: widget.scannedEpcs.length,
                  itemBuilder: (context, index) {
                    return Padding(
                      padding: const EdgeInsets.symmetric(vertical: 4),
                      child: Text(
                        widget.scannedEpcs[index].padLeft(16, '0'),
                        style: const TextStyle(fontFamily: 'Monospace'),
                      ),
                    );
                  },
                ),
              ),
              const SizedBox(height: 16),
              _buildInfoRows(),
              const SizedBox(height: 24),
              SizedBox(
                width: double.infinity,
                child: ElevatedButton(
                  onPressed: isLoading ? null : _sendQualityReview,
                  style: ElevatedButton.styleFrom(
                    padding: const EdgeInsets.symmetric(vertical: 16),
                    backgroundColor: Theme.of(context).primaryColor,
                  ),
                  child: isLoading
                      ? const SizedBox(
                          height: 20,
                          width: 20,
                          child: CircularProgressIndicator(
                            valueColor:
                                AlwaysStoppedAnimation<Color>(Colors.white),
                          ),
                        )
                      : const Text(
                          'Confirmar y Generar Excel',
                          style: TextStyle(fontSize: 16),
                        ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildInfoRows() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        _buildInfoRow('No. Logística', widget.noLogistica.toString()),
        _buildInfoRow('Cliente', widget.clienteName),
        _buildInfoRow(
            'Operador',
            operadorController.text.isEmpty
                ? 'Embarques'
                : operadorController.text),
        _buildInfoRow('Estatus', 'Material Separado'),
        _buildInfoRow('No. EPCs', widget.scannedEpcs.length.toString()),
        _buildInfoRow('Última Actualización',
            DateFormat('dd/MM/yyyy HH:mm:ss').format(DateTime.now())),
      ],
    );
  }

  Widget _buildInfoRow(String label, String value) {
    return Padding(
      padding: const EdgeInsets.symmetric(vertical: 4),
      child: Row(
        children: [
          Text(
            '$label: ',
            style: const TextStyle(fontWeight: FontWeight.bold),
          ),
          Expanded(
            child: Text(
              value,
              style: const TextStyle(color: Colors.black87),
            ),
          ),
        ],
      ),
    );
  }
}
